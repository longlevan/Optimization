package ElectricNetwork
	"This package contains simple models for optimization problems with electrical networks"

	connector Pin
		Modelica.SIunits.Voltage v[2];
		flow Modelica.SIunits.Current i[2];
	end Pin;
	
	model Source
		ElectricNetwork.Pin p;
		parameter Modelica.SIunits.Voltage Vrms = 4800;
		parameter Modelica.SIunits.Angle theta = 0;
	equation
		p.v[1] = Vrms*cos(theta);
		p.v[2] = Vrms*sin(theta);
	end Source;
	
	model Line
		ElectricNetwork.Pin a;
		ElectricNetwork.Pin b;
		parameter Modelica.SIunits.Resistance R = 0.1;
		parameter Modelica.SIunits.Resistance X = 0;
	equation
		a.i[1] + b.i[1] = 0;
		a.i[2] + b.i[2] = 0;
		a.v[1] - b.v[1] = a.i[1]*R - a.i[2]*X;
		a.v[2] - b.v[2] = a.i[2]*R + a.i[1]*X;
	end Line;
	
	model Load
		ElectricNetwork.Pin p(v(start = {Vn, 0}));
		Modelica.SIunits.Voltage Vrms(start = Vn);
		parameter Modelica.SIunits.Voltage Vn = 220;
		Modelica.Blocks.Interfaces.RealInput P;
		Modelica.Blocks.Interfaces.RealInput Q;
	equation
		Vrms = sqrt(p.v[2]^2 + p.v[1]^2);
		p.i[1] = -(p.v[2]*Q + p.v[1]*P)/(Vn^2);
	    p.i[2] = -(p.v[2]*P - p.v[1]*Q)/(Vn^2);
	    //p.i[1] = -(p.v[2]*Q + p.v[1]*P)/(p.v[1]^2 + p.v[2]^2);
	    //p.i[2] = -(p.v[2]*P - p.v[1]*Q)/(p.v[1]^2 + p.v[2]^2);
	end Load;
	
	model Battery
		extends ElectricNetwork.Load;
		parameter Modelica.SIunits.Energy Ebatt = 100 "Storage capacity for the battery";
		parameter Real SOCstart = 0.5;
		Real SOC(start = SOCstart, fixed = true, min = 0, max = 1);
	equation
		// Ideal battery model
		Ebatt*der(SOC) = -P;
	end Battery;
	
	model ACnetworkSimple
		ElectricNetwork.Source S(Vrms=220);
		ElectricNetwork.Load L;
		ElectricNetwork.Line line1(R=0.1, X=0.1);
		Modelica.Blocks.Interfaces.RealInput P;
		Modelica.Blocks.Interfaces.RealInput Q;
	equation
		connect(S.p, line1.a);
		connect(line1.b, L.p);
		L.P = P;
		L.Q = Q;
	end ACnetworkSimple;
	
	model ACnetwork
		parameter Real SOCstart = 0.5;
		parameter Real R1 = 1.2 "Line resistance 1";
        parameter Real R2 = 1.1 "Line resistance 2";
        parameter Real R3 = 1.05 "Line resistance 3";
        parameter Real A1 = 1400 "Area with PV panels 1";
        parameter Real A2 = 900 "Area with PV panels 2";
        parameter Real A3 = 1200 "Area with PV panels 3";
        parameter Modelica.SIunits.Power P1 = 200000 "Nominal power consumption building 1";
        parameter Modelica.SIunits.Power P2 = 175000 "Nominal power consumption building 2";
        parameter Modelica.SIunits.Power P3 = 180000 "Nominal power consumption building 3";
        parameter Modelica.SIunits.Energy Ebatt = 0.5*(P1+P2+P3)*2*3600 "Storage capacity for the battery";
        parameter Modelica.SIunits.Voltage Vs = 4800 "Voltage source";
	    parameter Real effPV = 0.9*0.12 "Efficiency of PV panels";
	  	parameter Modelica.SIunits.Power Qrad = 800 "Maximum solar radiation per square meter";
	  	
	    /// Variable of the model
        Real Money(start = 0.0, fixed = true);
		Modelica.SIunits.Energy E(start=0.0, fixed = true) "Energy consumption of the network";
		
		ElectricNetwork.Source S(Vrms=Vs);
		
		ElectricNetwork.Load bldg1(Vn=Vs);
		ElectricNetwork.Load bldg2(Vn=Vs);
		ElectricNetwork.Load bldg3(Vn=Vs);
		
		ElectricNetwork.Load pv1(Vn=Vs);
		ElectricNetwork.Load pv2(Vn=Vs);
		ElectricNetwork.Load pv3(Vn=Vs);
		
		ElectricNetwork.Battery batt(Vn=Vs, SOCstart = SOCstart, Ebatt = Ebatt);
		
		ElectricNetwork.Line line1(R=R1, X=R1/10);
		ElectricNetwork.Line line2(R=R2, X=R2/12);
		ElectricNetwork.Line line3(R=R3, X=R3/10);
		
		Modelica.Blocks.Interfaces.RealInput P_bldg1;
		Modelica.Blocks.Interfaces.RealInput P_bldg2;
		Modelica.Blocks.Interfaces.RealInput P_bldg3;
		Modelica.Blocks.Interfaces.RealInput P_pv1;
		Modelica.Blocks.Interfaces.RealInput P_pv2;
		Modelica.Blocks.Interfaces.RealInput P_pv3;
		
		Modelica.Blocks.Interfaces.RealInput P_batt;
		Modelica.Blocks.Interfaces.RealInput Q_batt;
		
		Modelica.Blocks.Interfaces.RealInput price;
	equation
		//Money = E*price;
		der(Money) = -(S.p.v[1]*S.p.i[1] + S.p.v[2]*S.p.i[2])/1000.0*price/3600.0;
		1000*3600*der(E) = -(S.p.v[1]*S.p.i[1] + S.p.v[2]*S.p.i[2]);
		
		connect(S.p,     line1.a);
		connect(line1.b, line2.a);
		connect(line2.b, line3.a);
		connect(line3.b, batt.p);
		
		connect(bldg1.p, line1.b);
		connect(pv1.p, line1.b);
		connect(bldg2.p, line2.b);
		connect(pv2.p, line2.b);
		connect(bldg3.p, line3.b);
		connect(pv3.p, line3.b);
		
		bldg1.P = P_bldg1*P1;
		bldg1.Q = P_bldg1/8.0;
		
		bldg2.P = P_bldg2*P2;
		bldg2.Q = P_bldg2/9.0;
		
		bldg3.P = P_bldg3*P3;
		bldg3.Q = P_bldg3/10.0;
		
		pv1.P = P_pv1*Qrad*A1*effPV;
		pv1.Q = 0;
		pv2.P = P_pv2*Qrad*A2*effPV;
		pv2.Q = 0;
		pv3.P = P_pv3*Qrad*A3*effPV;
		pv3.Q = 0;
		
		batt.P = P_batt;
		batt.Q = Q_batt;
		
	end ACnetwork;
	
    model Network "Flattened model of an electrical DC network"
	  /// Parameters for the model
      parameter Real R1 = 1.2 "Line resistance 1";
      parameter Real R2 = 1.1 "Line resistance 2";
      parameter Real R3 = 1.05 "Line resistance 3";
      parameter Real A1 = 1400 "Area with PV panels 1";
      parameter Real A2 = 900 "Area with PV panels 2";
      parameter Real A3 = 1200 "Area with PV panels 3";
      parameter Modelica.SIunits.Power P1 = 200000 "Nominal power consumption building 1";
      parameter Modelica.SIunits.Power P2 = 175000 "Nominal power consumption building 2";
      parameter Modelica.SIunits.Power P3 = 180000 "Nominal power consumption building 3";
      parameter Modelica.SIunits.Energy Ebatt = 0.2*(P1+P2+P3)*2*3600 "Storage capacity for the battery";
      parameter Modelica.SIunits.Voltage Vs = 4800 "Voltage source";
	  parameter Real effPV = 0.9*0.12 "Efficiency of PV panels";
	  
	  /// Variable of the model
      parameter Modelica.SIunits.Power Qrad = 800 "Maximum solar radiation per square meter";
      Modelica.SIunits.Energy E(start=0.0, fixed = true) "Energy consumption of the network";
      Modelica.SIunits.Voltage V1(start = Vs, nominal=Vs) "Voltage at the node";
      Modelica.SIunits.Voltage V2(start = Vs, nominal=Vs) "Voltage at the node";
      Modelica.SIunits.Voltage V3(start = Vs, nominal=Vs) "Voltage at the node";
      Modelica.SIunits.Current Is,I2,I3,IL_1,IL_2,IL_3,IS_1,IS_2,IS_3 "Currents in branches and nodes";
	  /// State variables
      Real SOC(start = SOCstart, fixed = true, min = 0, max = 1);
	  Real Money(start = 0.0, fixed = true);
	  
	  /// Inputs of the model
      input Modelica.SIunits.Current Ibatt;
      input Real price;
      input Real pv1;
      input Real pv2;
      input Real pv3;
      input Real bldg1;
      input Real bldg2;
      input Real bldg3;
      parameter Real SOCstart = 0.5;
    equation
	  
	  // Energy consumed and money spent
      der(E) = Is*Vs;
      der(Money) = (Is*Vs)/1000.0*price/3600.0;
      
	  // Electrical connections
      Is = (Vs - V1)/R1;
      I2 = (V1 - V2)/R2;
      I3 = (V2 - V3)/R3;

      Is = IL_1 + IS_1 + I2;
      I2 = IL_2 + IS_2 + I3;
      I3 = IL_3 + IS_3 + Ibatt;
      
	  // Power loads
      IL_1 = bldg1*P1/V1;
      IS_1 = -Qrad*pv1*A1*effPV/V1;

      IL_2 = bldg2*P2/V2;
      IS_2 = -Qrad*pv2*A2*effPV/V2;

      IL_3 = bldg3*P3/V3;
      IS_3 = -Qrad*pv3*A3*effPV/V3;
      
	  // Ideal battery model
      Ebatt*der(SOC) = Ibatt*V3;

    end Network;

	model NetworkSim "Simple simulation model with no battery storage and fixed electricity price"
		ElectricNetwork.Network n(SOCstart = 0.8);
	equation
		n.Ibatt = 0;
		n.price = 0.1;
	end NetworkSim;
	
    optimization NetworkBatteryMngmtOpt_E( objective = E(finalTime), startTime = 0.0, finalTime = 24.0*3600.0 )
        extends ElectricNetwork.Network(SOCstart(free = true, initialGuess=0.5, min=0.1, max=1.0));
        parameter Real tol = 0.05;
    constraint
        SOC <= 1.0;
        0.1 <= SOC;
        V1 <= Vs*(1+tol);
        Vs*(1-tol) <= V1;
        V2 <= Vs*(1+tol);
        Vs*(1-tol) <= V2;
        V3 <= Vs*(1+tol);
        Vs*(1-tol) <= V3;
        SOC(finalTime) = SOC(startTime);  
    end NetworkBatteryMngmtOpt_E;
    
    optimization NetworkBatteryMngmtOpt_Money( objective = Money(finalTime), startTime = 0.0, finalTime = 24.0*3600.0 )
        extends ElectricNetwork.Network(SOCstart(free = true, initialGuess=0.5, min=0.1, max=1.0));
        parameter Real tol = 0.05;
    constraint
        SOC <= 1.0;
        0.1 <= SOC;
        V1 <= Vs*(1+tol);
        Vs*(1-tol) <= V1;
        V2 <= Vs*(1+tol);
        Vs*(1-tol) <= V2;
        V3 <= Vs*(1+tol);
        Vs*(1-tol) <= V3;
        SOC(finalTime) = SOC(startTime);
    end NetworkBatteryMngmtOpt_Money;
    
    optimization ACnetworkBatteryMngmtOpt_Money( objective = Money(finalTime), startTime = 0.0, finalTime = 24.0*3600.0 )
        extends ElectricNetwork.ACnetwork(SOCstart(free = true, initialGuess=0.5, min=0.1, max=1.0));
        parameter Real tol = 0.1;
    constraint
        batt.SOC <= 1.0;
        0.1 <= batt.SOC;
        batt.P <= 100000;
        -100000 <= batt.P;
        bldg1.Vrms <= bldg1.Vn*1.05;
        bldg2.Vrms <= bldg2.Vn*1.05;
        bldg3.Vrms <= bldg3.Vn*1.05;
        bldg1.Vn*0.95 <= bldg1.Vrms;
        bldg2.Vn*0.95 <= bldg2.Vrms;
        bldg3.Vn*0.95 <= bldg3.Vrms;
        batt.SOC(finalTime) = batt.SOC(startTime);
    end ACnetworkBatteryMngmtOpt_Money;
    
    optimization ACnetworkBatteryMngmtOpt_Money( objective = Money(finalTime), startTime = 0.0, finalTime = 24.0*3600.0 )
        extends ElectricNetwork.ACnetwork(SOCstart(free = true, initialGuess=0.5, min=0.1, max=1.0));
        parameter Real tol = 0.1;
    constraint
        batt.SOC <= 1.0;
        0.1 <= batt.SOC;
        batt.P <= 100000;
        -100000 <= batt.P;
        bldg1.Vrms <= bldg1.Vn*1.05;
        bldg2.Vrms <= bldg2.Vn*1.05;
        bldg3.Vrms <= bldg3.Vn*1.05;
        bldg1.Vn*0.95 <= bldg1.Vrms;
        bldg2.Vn*0.95 <= bldg2.Vrms;
        bldg3.Vn*0.95 <= bldg3.Vrms;
        batt.SOC(finalTime) = batt.SOC(startTime);
    end ACnetworkBatteryMngmtOpt_Money;
	
end ElectricNetwork;